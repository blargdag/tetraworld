- Gravity bug: due to the way the gravity system clears the new queue for Pos
  at the end of run(), if any objects are spawned in midair due to
  gravity-related triggers, they will not be noticed by the gravity system and
  will get stuck in midair.
   - The gravity system should probably be actively monitoring any new objects
     that might acquire Pos during the falling loop.
- Stacking bugs:
   - Should (try to) stack when an object moves into a new location.
   + Game.numGold() should count stacked items properly.
- Need to start implement event filtering based on visibility / audibility!
- Implement throwing rocks at monsters. :-D
   - Implement UI targeting mode.
- Need better control over branchiness of second level.
- What about a crab creature (slow-moving, but tough, cannot climb, cannot swim
  but can breathe underwater) that, once killed, leaves a shell that you can
  don to serve as protection against falling rocks? :-P
- Water-related issues:
   X Climb-ledge action should not trigger while in water.
      * Why shouldn't it?
   + Creatures that can't swim shouldn't be able to move up in water, unless
     there's support from below!
   - A-monsters should fear water.
      - Create instead a water-dwelling creature that will terrorize the player
        in whole new 4D ways. :-D
   + Gravity system stops applying to sinking objects after initial sink
     because Pos doesn't change anymore.
      + Argh!! This is far more complex than anticipated. Basically we CANNOT
        use the gravity system for this, because the gravity system acts within
        1 turn, but this must spread out over multiple turns, but not just
        multiple calls to the gravity system (which can happen multiple times
        per turn!!!), but must be keyed to the agent system's current tick
        number.
      + So, looks like we need to attach a Sinking component to sinking
        objects, and register an agent that specifically deals with pulling
        down sinking objects.
- [mapgen] Different styled rooms.
   - Maybe occasionally block off leaf nodes?
   - Maybe some rooms can turn into corridors.
- Improve creature AI.
   - Pathfinding.
- Implement drowning and oxygen masks... Well, OK, this is 4D, so "oxygen"
  doesn't make sense. Maybe call it "diving equipment"?
- Implement locked doors and keys?
   - Basically, reserve the first n levels of the BSP tree (or separately
     generate them) for disjoint areas, then insert locked doors between them.
- Tutorial should include climb-ledge mechanics?
- Should start encapsulating all uses of the RNG so that we can start
  generating seedable levels.
- Pit trap generation is very inefficient; it hardly ever reaches the requested
  number!
- Implement water currents? :-D
   - Moving creatures should leave a wake, maybe implemented as temporary
     random mover in water tiles?
- Per-room water levels?
- Waterfalls? Rivers? :-D
- [mapgen] Occasionally generate spiral staircases? :-D
- Implement uncrossable pits and ropes for crossing them?
   - Alternatively, opposite ladderless ledges that require a rope to traverse.
- Subdisplay of subdisplay should bypass the intermediate layer of SubDisplay
  and connect directly to the bottom layer display.
- Subdisplay .writef method should perform clipping(?).
X Implement .dim and .pos for Rectangle.
+ Unify Rectangle with Vec?
+ [bufdisp] Implement subline flushing.
+ [bufdisp] Support color.
+ Implement save/load.
   P Should probably turn Vec and Region into mixins instead of isolated types,
     so that we can unify Vec with Pos and make Region more nicely
     serializable.
+ BUG: tile colors are DIFFERENT across Windows/Posix; so you really should not
  save any tile colors in the save file, you should be using generic tile IDs
  that map to actual tiles in a separate module (that has proper per-platform
  values initialized! -- though that part is taken care of by arsd.terminal,
  you just have to separate it from the savefile).
+ Should probably implement gravity now rather than later, since it changes a
  LOT of things.
+ Map underlying representation should be distinct from dchar.
   + The dchar view should be via a MapTile proxy object that maps underlying
     game objects into printable tiles.
+ Need to refactor play() and separate out the UI code from the game engine
  code.
+ Make climbing up ledges animatable.
+ Implement NPCs / moving creatures!
+ Implement "smooth" scrolling in vertical / ana/kata directions. Probably
  *very* necessary for new players to even understand what's going on.
+ Make smooth scroll configurable.
+ Implement back edges in mapgen.
   + This seems to be the simplest way of creating cycles. The spanning tree
     generated by the BSP tree guarantees connectivity.
   + This would be a good place to add one-way pits too. Though non-trivial
     (unidirectional) cycles are still not obvious how to generate them.
+ Implement message() batching and --MORE-- prompt.
+ BUG: tile above undiscovered pit trap shows up as blank??
   * Can't repro.
+ Smooth scroll parameters (skip, pause) should be adapted to the current
  terminal, since it may change depending on terminal characteristics.
   + Actually, what you *really* should be doing is to key the frames to real
     time, rather than some fake sleep timer. *That* will guarantee device
     independence and device speed independence.
+ Gravity should apply immediately after each creature's turn.
+ Optimize gravity system so that it doesn't have to loop through *all* objects
  with Pos every iteration!!
+ BUG: sometimes a pit can be created at the bottom of a ladder, which makes
  that ladder inaccessible.
P Implement session recorder.
   * This is turning out to be FAR more complex than anticipated. :-(  (What
     else is new?!)
+ Segfault when fall on A then get hit and die.
   + Caused by dead player no longer having a Pos.
   P Should really turn player into corpse instead of outright deletion.
P Fold Vec!(4,int) into Pos. There are TOO MANY different types representing a
  4D vector, it's seriously uglifying the code like crazy.
   * A distinction needs to be made between Vec!(int,4), a generic 4D vector,
     and Pos, an ECS position component. An object can have a Pos (a position
     on the map), but it doesn't make sense to say an object has a 4D vector. A
     Pos happens to be a 4D vector, *but could be more later*, such as having a
     map ID.
   * So the two should not be conflated. Code that conflates them should be
     fixed.
+ Current gravity system is B0RKEN. It needs to interlace with the Mortal
  system, otherwise it makes no sense (fall on A, hit it, but before it dies
  you fall further: out of sequence).
+ Add water level, underneath which free movement is possible? :-D
   + Need to place player and exit portal above water level.
   + Water should fill pits too. Currently there's a vacuum there and you can
     fall even though it ought to be completely submerged!
   + Water should only support weight of objects *inside* it, but not objects
     above it!
   + Inanimate objects (and objects that can't swim) should sink to the bottom
     of water.
   + Sinking objects should sink *slowly*!
+ Rework hidden pit traps:
   + Terrain should be blank tile or doorway, NOT wall!
   + Pit trap object should have appearance of wall, AND should affect
     appearance of tile above itself like walls do.
+ BUG: after falling through pit trap the first time, should suppress "fall
  through hidden pit" message.
X Fall-and-injure should not trigger unless object falls at least 1 tile! You
  can't just walk on top of an object and cause falling damage!
   * Actually you can, it's called trampling your enemies. :-D
+ [UI] Why is the cursor position for the info screen messed up??
   * Because it's that stupid by-ref vs. by-value issue again. Sigh...
+ Need a tutorial mode for new players!!!
   + Decide on map(s) that are good for introducing 4D movements and other
     mechanics.
   + Extend mapgen to be able to generate these sorts of maps. Or maybe just
     hard-code this for now?
+ BUG: after advancing a story node, UI code seems to have gone out of sync and
  scrolling doesn't work anymore!
   * Haha, it's 'cos after replacing World you lost all your event watchers.
     :-D
+ BUG: agent system, gravity system, all need to be reset upon transitioning to
  a new World.
   P Probably should encapsulate all of this in a separate object instead!!
+ Probably should have a way for advanced players to skip tutorial mode?
   + Either that, or make it short enough that it can be completed quickly.
+ Need pause before info screen if there are unread messages!
+ Falling on a ladder should not cause ladder to support weight!
+ Underwater ladders are not considered underwater, no thanks to terrain hack.
   X Looks like the only solution is to have multiple terrain objects per tile.
     :-(
   + Either that, or turn ladders into actual objects. This will require
     creating a lot of objects. :-/
      P But on the bright side, destructible ladders become an option... :-D
      P And randomized ladder styles.
      + And simplification of that horrible GameMap.opIndex()!
+ Mapgen should have better control over water gen, so that we can control it
  from the story nodes.
+ Implement FOV and player map memory.
+ Player memory needs to cover walls outside of map bounds!
+ Player memory should save in a more compressed format!
+ [loadsave] Components of special entities should NOT be saved!!!
   X Either that, or terrain component setup should be done AFTER the save file
     is loaded, so that old values are properly replaced.
+ Player map memory should not track mobile entities like creatures that
  clearly will not stay in place.
+ BUG: help screen does not handle paging correctly!!!
+ Clean up event/notify system:
   + Should not have so many redundant methods for every possible message!!
     Especially since programmatically most of them don't *need* to be
     distinguished except for the format of the message itself.
   + Really, there should be just a small number of basic event types, like
     visual, noise, smell, etc., and the exact message should be selected by
     some enum type.
      + Basically, we only need a separate method if a listener needs to react
        in a different way to it.
      + IOW, there's a user-facing component to it, i.e., we want to carry the
        ThingId's of the involved parties to the event so that a future
        language module can translate it appropriately into an on-screen
        message.
      + There's also an internal component to it: an abstract representation
        that in-game entities may react to, like noise waking up sleeping
        creatures, or picking up an object triggering a guarding creature's
        anger, etc..
+ Fix the single-room multiple-floor-types bug.
   + *Should* just involve tweaking room interiors... but better be careful
     just in case.
   * Whoa, what a mess!  There are SO MANY incredible assumptions in the code
     that makes it super-flaky to change the original convention; and now the
     lack of unittests is introducing tons of regressions. :-(
   + Plan of attack:
      + .interior really should be tweaked so that it *actually* represents the
        proper interior of the room, i.e., it contains every empty space in the
        room AND NOTHING ELSE, NO WALLS or any nonsense of that sort.
      + Add more unittests.
      + Write a global map sanitizer that checks for broken/disconnected doors,
        and run the stress test through it until no more problems are found.
      + Write more unittests for every error found!
+ BUG: swimming through underwater hidden pit does not reveal it.
   * Now pit traps are hidden and blocking; they only open up when triggered
     from above.
+ BUG: pit traps don't block visibility, allowing player to infer their
  location (which is a contradiction: if you could see through it, it's not
  hidden anymore!).
+ Should not be able to walk sideways into a hidden pit trap! Instead, it
  should trigger from above.
+ BUG: The sink agent (id=257) is not being filtered out from agent queue in
  save file!
+ Implement falling rock trap.
   + Instead of doing this from scratch, what about adapting the current pit
     traps? A rock trap is essentially a pit trap that is triggered from below
     instead of above, and has a pile of rocks above it.
   + First things first, implement rocks as items.
   + Refactor pit traps to have a separate trigger object that can be
     separately placed.
   X Create rock traps as something triggered from below, with rocks generated
     above it.
      * Actually, this runs into several problems with the way trapdoors work.
        Better implement rock traps as a separate thing for now!
+ BUG: monsters get trapped at top of ladder and stop moving. Also, while
  chasing player on ladder, they seem to move erratically with many pauses.
+ BUG: portals can sometimes spawn on top of a pit trap, making it impossible
  to win the game. :-(
+ Implement pickup action.
   + Gold count should no longer be based on Pickable; gold should have a
     separate QuestToken component for counting purposes.
   + Implement inventory screen.
   + Implement item stacking.
+ BUG: a rock from a rock trap that kills a creature will land on the trigger
  and trigger a second rock.
   + Possible solution: add a Weight component that can be used to distinguish
     between rocks hitting the trigger vs. presumably heavier agents walking on
     it.
   + The Weight component can also take the place of NoGravity, which is kinda
     an ugly hack right now.
