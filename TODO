- New plot: instead of pre-determined missions, what about Tetraworld Corp hire
  you as an independent contractor? And instead of merely mining for "gold",
  your job is to explore hostile 4D space to retrieve interesting artifacts.
   - And the value of artifacts may be unknown until you bring it back.
   - Tetraworld Corp only provides the 4D environment suit. You have find your
     own equipment and/or earn enough to buy upgrades.
   - Levels will be vicious right from the start.  It's up to you to survive.
     And the deeper you go, the more vicious it gets.
- Implement throwing rocks at monsters. :-D
   - Implement UI targeting mode.
- Need better control over branchiness of second level.
- [mapgen] Different styled rooms.
   - Need to support polymorphism in load/save. :-/
      - Y'know what, just hack it in MapNode with .save methods. Let's not get
        bogged down by premature generalization. Let that come *after* we have
        something actually working!
   - Ideas:
      - Occasionally block off leaf nodes.
      - Some rooms can turn into corridors.
      - Run a convex hull algo on the doors of a room to produce polytopic
        rooms. :-P  Will have to suppress sink-doors for this, though.
      - Bitmapped leaf nodes for occasional complex per-tile layouts?
- Improve creature AI.
   - Pathfinding.
- Water-related issues:
   X Climb-ledge action should not trigger while in water.
      * Why shouldn't it?
   + Creatures that can't swim shouldn't be able to move up in water, unless
     there's support from below!
   + A-monsters should fear water.
   + Create instead a water-dwelling creature that will terrorize the player in
     whole new 4D ways. :-D
   + Gravity system stops applying to sinking objects after initial sink
     because Pos doesn't change anymore.
      + Argh!! This is far more complex than anticipated. Basically we CANNOT
        use the gravity system for this, because the gravity system acts within
        1 turn, but this must spread out over multiple turns, but not just
        multiple calls to the gravity system (which can happen multiple times
        per turn!!!), but must be keyed to the agent system's current tick
        number.
      + So, looks like we need to attach a Sinking component to sinking
        objects, and register an agent that specifically deals with pulling
        down sinking objects.
   - Implement water currents? :-D
      - Moving creatures should leave a wake, maybe implemented as temporary
        random mover in water tiles?
   - Per-room water levels?
   - Waterfalls? Rivers? :-D
- Should start encapsulating all uses of the RNG so that we can start
  generating seedable levels.
- Pit trap generation is very inefficient; it hardly ever reaches the requested
  number!
- Fix performance of map scrolling. In high-resolution terminals the
  performance degradation is quite visible.
   - Probably should pre-render tiles into a 4D buffer and window over it
     instead of calling .opIndex on the world map in every frame!
   - Also, rendering of the map itself is quite slow (even with smoothscroll
     turned off). Probably need to do BSP node caching to maximize on
     coherence?
- Implement uncrossable pits and ropes for crossing them?
   - Alternatively, opposite ladderless ledges that require a rope to traverse.
- Subdisplay of subdisplay should bypass the intermediate layer of SubDisplay
  and connect directly to the bottom layer display.
- Subdisplay .writef method should perform clipping(?).
X Implement .dim and .pos for Rectangle.
+ Unify Rectangle with Vec?
+ [bufdisp] Implement subline flushing.
+ [bufdisp] Support color.
+ Implement save/load.
   P Should probably turn Vec and Region into mixins instead of isolated types,
     so that we can unify Vec with Pos and make Region more nicely
     serializable.
+ BUG: tile colors are DIFFERENT across Windows/Posix; so you really should not
  save any tile colors in the save file, you should be using generic tile IDs
  that map to actual tiles in a separate module (that has proper per-platform
  values initialized! -- though that part is taken care of by arsd.terminal,
  you just have to separate it from the savefile).
+ Should probably implement gravity now rather than later, since it changes a
  LOT of things.
+ Map underlying representation should be distinct from dchar.
   + The dchar view should be via a MapTile proxy object that maps underlying
     game objects into printable tiles.
+ Need to refactor play() and separate out the UI code from the game engine
  code.
+ Make climbing up ledges animatable.
+ Implement NPCs / moving creatures!
+ Implement "smooth" scrolling in vertical / ana/kata directions. Probably
  *very* necessary for new players to even understand what's going on.
+ Make smooth scroll configurable.
+ Implement back edges in mapgen.
   + This seems to be the simplest way of creating cycles. The spanning tree
     generated by the BSP tree guarantees connectivity.
   + This would be a good place to add one-way pits too. Though non-trivial
     (unidirectional) cycles are still not obvious how to generate them.
+ Implement message() batching and --MORE-- prompt.
+ BUG: tile above undiscovered pit trap shows up as blank??
   * Can't repro.
+ Smooth scroll parameters (skip, pause) should be adapted to the current
  terminal, since it may change depending on terminal characteristics.
   + Actually, what you *really* should be doing is to key the frames to real
     time, rather than some fake sleep timer. *That* will guarantee device
     independence and device speed independence.
+ Gravity should apply immediately after each creature's turn.
+ Optimize gravity system so that it doesn't have to loop through *all* objects
  with Pos every iteration!!
+ BUG: sometimes a pit can be created at the bottom of a ladder, which makes
  that ladder inaccessible.
P Implement session recorder.
   * This is turning out to be FAR more complex than anticipated. :-(  (What
     else is new?!)
+ Segfault when fall on A then get hit and die.
   + Caused by dead player no longer having a Pos.
   P Should really turn player into corpse instead of outright deletion.
P Fold Vec!(4,int) into Pos. There are TOO MANY different types representing a
  4D vector, it's seriously uglifying the code like crazy.
   * A distinction needs to be made between Vec!(int,4), a generic 4D vector,
     and Pos, an ECS position component. An object can have a Pos (a position
     on the map), but it doesn't make sense to say an object has a 4D vector. A
     Pos happens to be a 4D vector, *but could be more later*, such as having a
     map ID.
   * So the two should not be conflated. Code that conflates them should be
     fixed.
+ Current gravity system is B0RKEN. It needs to interlace with the Mortal
  system, otherwise it makes no sense (fall on A, hit it, but before it dies
  you fall further: out of sequence).
+ Add water level, underneath which free movement is possible? :-D
   + Need to place player and exit portal above water level.
   + Water should fill pits too. Currently there's a vacuum there and you can
     fall even though it ought to be completely submerged!
   + Water should only support weight of objects *inside* it, but not objects
     above it!
   + Inanimate objects (and objects that can't swim) should sink to the bottom
     of water.
   + Sinking objects should sink *slowly*!
+ Rework hidden pit traps:
   + Terrain should be blank tile or doorway, NOT wall!
   + Pit trap object should have appearance of wall, AND should affect
     appearance of tile above itself like walls do.
+ BUG: after falling through pit trap the first time, should suppress "fall
  through hidden pit" message.
X Fall-and-injure should not trigger unless object falls at least 1 tile! You
  can't just walk on top of an object and cause falling damage!
   * Actually you can, it's called trampling your enemies. :-D
+ [UI] Why is the cursor position for the info screen messed up??
   * Because it's that stupid by-ref vs. by-value issue again. Sigh...
+ Need a tutorial mode for new players!!!
   + Decide on map(s) that are good for introducing 4D movements and other
     mechanics.
   + Extend mapgen to be able to generate these sorts of maps. Or maybe just
     hard-code this for now?
+ BUG: after advancing a story node, UI code seems to have gone out of sync and
  scrolling doesn't work anymore!
   * Haha, it's 'cos after replacing World you lost all your event watchers.
     :-D
+ BUG: agent system, gravity system, all need to be reset upon transitioning to
  a new World.
   P Probably should encapsulate all of this in a separate object instead!!
+ Probably should have a way for advanced players to skip tutorial mode?
   + Either that, or make it short enough that it can be completed quickly.
+ Need pause before info screen if there are unread messages!
+ Falling on a ladder should not cause ladder to support weight!
+ Underwater ladders are not considered underwater, no thanks to terrain hack.
   X Looks like the only solution is to have multiple terrain objects per tile.
     :-(
   + Either that, or turn ladders into actual objects. This will require
     creating a lot of objects. :-/
      P But on the bright side, destructible ladders become an option... :-D
      P And randomized ladder styles.
      + And simplification of that horrible GameMap.opIndex()!
+ Mapgen should have better control over water gen, so that we can control it
  from the story nodes.
+ Implement FOV and player map memory.
+ Player memory needs to cover walls outside of map bounds!
+ Player memory should save in a more compressed format!
+ [loadsave] Components of special entities should NOT be saved!!!
   X Either that, or terrain component setup should be done AFTER the save file
     is loaded, so that old values are properly replaced.
+ Player map memory should not track mobile entities like creatures that
  clearly will not stay in place.
+ BUG: help screen does not handle paging correctly!!!
+ Clean up event/notify system:
   + Should not have so many redundant methods for every possible message!!
     Especially since programmatically most of them don't *need* to be
     distinguished except for the format of the message itself.
   + Really, there should be just a small number of basic event types, like
     visual, noise, smell, etc., and the exact message should be selected by
     some enum type.
      + Basically, we only need a separate method if a listener needs to react
        in a different way to it.
      + IOW, there's a user-facing component to it, i.e., we want to carry the
        ThingId's of the involved parties to the event so that a future
        language module can translate it appropriately into an on-screen
        message.
      + There's also an internal component to it: an abstract representation
        that in-game entities may react to, like noise waking up sleeping
        creatures, or picking up an object triggering a guarding creature's
        anger, etc..
+ Fix the single-room multiple-floor-types bug.
   + *Should* just involve tweaking room interiors... but better be careful
     just in case.
   * Whoa, what a mess!  There are SO MANY incredible assumptions in the code
     that makes it super-flaky to change the original convention; and now the
     lack of unittests is introducing tons of regressions. :-(
   + Plan of attack:
      + .interior really should be tweaked so that it *actually* represents the
        proper interior of the room, i.e., it contains every empty space in the
        room AND NOTHING ELSE, NO WALLS or any nonsense of that sort.
      + Add more unittests.
      + Write a global map sanitizer that checks for broken/disconnected doors,
        and run the stress test through it until no more problems are found.
      + Write more unittests for every error found!
+ BUG: swimming through underwater hidden pit does not reveal it.
   * Now pit traps are hidden and blocking; they only open up when triggered
     from above.
+ BUG: pit traps don't block visibility, allowing player to infer their
  location (which is a contradiction: if you could see through it, it's not
  hidden anymore!).
+ Should not be able to walk sideways into a hidden pit trap! Instead, it
  should trigger from above.
+ BUG: The sink agent (id=257) is not being filtered out from agent queue in
  save file!
+ Implement falling rock trap.
   + Instead of doing this from scratch, what about adapting the current pit
     traps? A rock trap is essentially a pit trap that is triggered from below
     instead of above, and has a pile of rocks above it.
   + First things first, implement rocks as items.
   + Refactor pit traps to have a separate trigger object that can be
     separately placed.
   X Create rock traps as something triggered from below, with rocks generated
     above it.
      * Actually, this runs into several problems with the way trapdoors work.
        Better implement rock traps as a separate thing for now!
+ BUG: monsters get trapped at top of ladder and stop moving. Also, while
  chasing player on ladder, they seem to move erratically with many pauses.
+ BUG: portals can sometimes spawn on top of a pit trap, making it impossible
  to win the game. :-(
+ Implement pickup action.
   + Gold count should no longer be based on Pickable; gold should have a
     separate QuestToken component for counting purposes.
   + Implement inventory screen.
   + Implement item stacking.
+ BUG: a rock from a rock trap that kills a creature will land on the trigger
  and trigger a second rock.
   + Possible solution: add a Weight component that can be used to distinguish
     between rocks hitting the trigger vs. presumably heavier agents walking on
     it.
   + The Weight component can also take the place of NoGravity, which is kinda
     an ugly hack right now.
+ Gravity bug: due to the way the gravity system clears the new queue for Pos
  at the end of run(), if any objects are spawned in midair due to
  gravity-related triggers, they will not be noticed by the gravity system and
  will get stuck in midair.
   + The gravity system should probably be actively monitoring any new objects
     that might acquire Pos during the falling loop.
   + BP: weight triggers need to be edge-triggered rather than event-triggered,
     otherwise once a rock trap has enough load on its trigger, the next
     falling rock will trigger an infinite loop of the falling rock causing yet
     another rock to spawn.
+ Implement post-move message to observe contents of current tile.
+ Implement look command to examine current tile.
+ Stacking bugs:
   + Should (try to) stack when an object moves into a new location.
   + Game.numGold() should count stacked items properly.
+ BUG: on restore game, on-enter triggers are fired again. This is desirable
  for Message objects, but NOT for things like rock traps. :-P
+ Implement drop action.
   + First stab: just drop the entire stack.
   + Allow player to specify how many of a stacked item to drop.
      + Implement rudimentary string input UI.
+ Move bipartite level gen code into reusable routine, and integrate it into
  storyline. :-)
+ Random location selector is biased: BSP traversal should be weighed by volume
  ratio of subtrees rather than 50% chance!
+ BUG: autopickup should not trigger for all objects that have an inventory! It
  should only trigger for specific agents that have a propensity for picking
  things up!
+ Refactor random location code to central function with configurable criteria.
+ Implement equippable items.
+ BUG: do we really want body parts used as weapons to be part of a creature's
  inventory? Shouldn't there be a separate list of body parts?
   * Implemented them as intrinsics.
+ Dead objects should drop items in their inventory instead of essentially
  getting them stuck in limbo forever.
+ Rock traps should not be placed next to doorway.
+ What about a crab creature (slow-moving, but tough, cannot climb, cannot swim
  but can breathe underwater) that, once killed, leaves a shell that you can
  don to serve as protection against falling rocks? :-P
   + Ticks consumed per turn should be configurable, so that we can make crab
     creatures slower!
   + Create sharp implements or other trap types that can damage crab
     creatures. :-)
   P That, or make monsters attack each other when provoked. :-D
+ BUG: a pit trap does not have SupportsWeight; so if a monster is spawned on
  top of it, it will be stuck (horiz movement is not allowed for walkers when
  they're not on a floor that supports weight).
+ Need to start implement event filtering based on visibility / audibility!
+ BUG: creature that cannot climb appears to get stuck at the top of a vertical
  door's ladder.
   X Probably caused by a similar problem to the pit trap bug: a non-climbing
     monster that walks onto the top of a ladder will get stuck 'cos it does
     not support weight!
   X Hmm, can't reproduce the problem anymore. :-(  Non-climbing creatures
     appear to just fall down stairwells, as expected.
   + FOUND BUG: when a non-climbing creature falls on top of you in a stairwell
     and gets stuck on a ladder, it gets untagged from the gravity system and
     does not continue falling down once you move away.
   + We really should implement removal of support from under objects...
      * Naïve solution: iterate over every object with Pos each time gravity
        system runs. BP: lots of redundant work, potentially performance BP.
      + Possible better solution: maintain a list of objects that should be
        checked at each iteration (including sinking objects). But *don't*
        remove objects from this list merely because they've come to rest; only
        remove it if the support they have is permanent (part of terrain).
      + Make sure tracked list is part of savefile.
M Bug: a sinking object that lands on something else that subsequently moves
  away will get frozen in place instead of sinking farther.
   X When an object moves, need to add objects it previously supported to the
     gravity system's to-check list.
+ BUG: new gravity system seems to be triggering fallOn once too often.
   + Looks like the reason is because we call gravity.run() once per agent
     turn, so each time, an object that sits on top of a fallOn target will
     trigger fallOn again. Whereas in the old system, once the object has come
     to rest, it's removed from consideration until the next time it moves.
   + Seems like we need to differentiate between objects with new Pos vs.
     objects that previously came to rest, which should only be updated again
     if their previous support has changed.
      * Make use of FallType.rest in trackedObjs to flag that fallOn has been
        triggered already, so we should avoid triggering it again.
X To investigate: underwater rock trap spawns rock that seems to vanish into
  thin air?
   * Can't reproduce bug.
   * Though we *did* notice non-swimming objects that fall into water seem to
     sink a little too fast... (but maybe that's not a bad thing...)
+ Implement locked doors and keys?
   + Basically, reserve the first n levels of the BSP tree (or separately
     generate them) for disjoint areas, then insert locked doors between them.
+ BUG: gravity.d:322 assert failure (got FallType.fall for a sinking object).
   + Appears to be caused by a rare (but very possible) sequence of events:
      * In a room flooded with water 1-tile high and an A-creature on the
        floor, the A-creature jumps up from the water into the air. This puts
        it 1 tile above the water.
      * The creature falls. Since it cannot swim, it gets sinking state.
      * On the immediate next turn, it jumps again. It's still on sinking state
        since the sink agent hasn't sunken it to rest yet. Now it's 1 tile
        above water and still on the sinking list.
      * The sink agent runs, and asserts.
   + The above sequence only triggers when the sink agent, creature AI, and
     gravity.run() calls are in a specific order.
   + So it seems that the bug is that the sink agent cannot assume that sinking
     objects in its list are still eligible for sinking behaviour -- since
     states may have changed since the last time the gravity system checked the
     falling state. Another race condition. :-(
+ BUG: looks like the true cause of the assert bug is a sync issue where a
  creature can jump in the air but the gravity system fails to run. *That's*
  why the creature fall state was not updated properly. :-(
   + It seems to be something else... it appears that the creature is in *sink*
     state after jumping up into the air?!?!
   + Found bug: once an object gets into sinking state, it never leaves it
     until it reaches permanent rest or falls again. Sinking state is too
     sticky. :-D
+ Tutorial should include climb-ledge mechanics?
+ [ui] Should merge equip/unequip actions into *single* inventory UI. Having
  separate actions and different inventory modes is very confusing.
   + Also, the drop dialogue is stupid and klunky; you should follow nethack's
     way of dropping all by default, limited number only if player prefixes it
     with a count.
+ Current drowning implementation is broken: the criterion for not drowning on
  surface is that there's no water above: but sometimes it can be a ceiling, in
  which you should *still* drown!
   + Really should forego these hacks, and implement media for real instead!
+ Implement drowning and oxygen masks... Well, OK, this is 4D, so "oxygen"
  doesn't make sense. Maybe call it "diving equipment"?
   + Hmph. It was a mistake to implement it as armor that enhances max/air;
     that's like installing a lung expander. :-D Diving equipment is more like
     a replacement medium that you're breathing *in*. Lung capacity remains the
     same, but the equipment is now the breathing medium.
+ Should run gravity system once before placing player in a new map, to avoid
  awkward messages of falling furniture on first move. :-D
   + Fixed also a sync bug with the agent system save/load sequence: we
     actually *must* save special IDs and load them, in order to keep special
     agents synced to their pre-save ticks. Otherwise they will go out of sync
     and may run ahead of the player's turn, causing the load/save gravity
     triggering bug.
      + So registering a special agent should scan the current queue and ignore
        the registration if it's already in the queue.
+ Bug: when air < maxair, equipping scuba gear should replenish air and
  subtract that amount of air from scuba.
   + Basically, treat air tiles as infinite static sources of air, and scuba
     gear as finite mobile source of air. Every time lungs draw air, air should
     be subtracted from the air source.
+ [scuba] Need to add warning messages when air goes low.
   + Possibly add red highlight to status line too?
+ [new AI] Implement factions.
+ BUG: gravity system is broken; walking from a ladder to the top of a creature
  will now get you stuck in midair.
+ Segfault bug: if you die while on top of a creature and your inventory items
  drop and kill the creature, the game will segfault.
   + Hmph, are you *sure* that was a segfault, or just a missing prompt before
     quitting?
   + Yes, it's a bona fide segfault, triggered when there are enough trailing
     messages after player death that requires more than one prompt.
+ [newAI] BP: AI sticks to goal too persistently; once a hunt goal is decided
  on, it doesn't reevaluate goals until target is dead or escaped, so seekAir
  goal remains inactive during the hunt even if hunter is in non-breathable
  medium.
   + Need conditions for reevaluating goals every so often. Too much
     persistence makes the AI dumber!
   + Or maybe medium awareness should be done outside of the goal system...
   * Rewrote AI to be a per-turn decision maker. I think full-out GOAP is too
     complex for the current state of AI. Maybe later once we have useful
     low-level primitives.
+ [newAI] Current seekAir hack causes water-fearing creatures to be unable to
  chase player when in 1-tile deep water, even though they can breathe just
  fine.
   * It was actually a bug in the SeekAirGoal.isActive.
+ OK, so the segfault is gone. But the UI is still not pausing for the last
  messages before exiting.
+ [mapgen] Occasionally generate spiral staircases? :-D
   + Did you realize, this can be done for *horizontal* exits? Because in 4D,
     you can install jutting steps from a flat wall and still have them spiral
     around horizontally. 4D just got a new notch of cool! (Just when we
     thought we'd run out of cool things about 4D!)
+ [mapgen] Need to fix random location bias: need to select BSP branches based
  on recursively-computed floor areas; using volume as a stand-in produces
  highly biased distributions (like rooms that are jammed full of traps and
  objects).
+ [mapgen] Object placement code should avoid tiles that are blocking (e.g.,
  pillars, stairs).
