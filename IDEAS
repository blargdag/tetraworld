Oh yes, still more detritus from 4D obsession.

Motivation:
- D's compile-time introspection makes it actually possible to write
  world-level objects as D classes! Isn't that awesome?!
- We can probably even auto-serialize using this trick too! No need for flaky
  fragile wrappers and hacked parse scripts to generate code from hand-made
  unreliable templates; just write straight D code and use introspection to
  auto-serialize stuff. Whoa! D just acquired whole new levels of cool!

//

Mapgen ideas:

- Tiered map generation:
   - First n levels of BSP tree can be used for generating large-scale
     topological features, such as disjoint regions connected by locked doors.
   - Middle levels of BSP can be used for thematic regions, like different
     terrain styles, vertically-oriented regions with largely climbing-related
     play styles, experience-oriented regions / mini-puzzles/challenges.
   - Lowest levels of BSP are individual rooms.

//

Language handling ideas:

- The obvious way to handle different noun forms, etc., is to represent all
  nouns by an abstract ID that gets looked up in a language-specific
  dictionary, yielding an object that encodes its various forms.
- This is cumbersome, though; since every new object will need modification in
  several files just to add a single word.
- What about using string literals as the dictionary key?
   - The key will by default always be English. But that does not preclude
     dictionaries that yield entries that translate the English noun into the
     target language.
      - If translations lag behind, the English word will be substituted as a
        placeholder until translators catch up. This will prevent the impasse
        in Elephant! where every language has to be updated with every form of
        every newly added word.
   - Furthermore, to alleviate the tedium and redundancy of defining every form
     of every noun, make it a rule that if a key is not found, then the code
     falls back to a default, language-specific declension pattern.
   - In fact, the noun definition can arbitarily omit any form if the default
     declension pattern derives the correct form. So you only have to
     explicitly define the exceptions to the rule, rather than every single
     word.
   - A more sophisticated system would be to have a tag in the noun definition
     to indicate things like declension class, so you could have multiple
     default declension that cover 90% of the cases, leaving only few
     exceptions to be explicitly coded for.

//

How to solve the removed-support problem in the gravity system?

- Problem: currently, when an object rests on another object, and the other
  object moves, the gravity system does not know to update the first object.
   - This problem can be na√Øvely solved by having the gravity system iterate
     over all objects with Pos at every iteration, but obviously that will
     become a major performance bottleneck as the number of objects grows.
- A related problem exists with sinking objects. Currently there is a Sinking
  component that we attach, which gets removed when the object comes to rest.
- Perhaps what we need is to extend the Sinking component to handle other
  instances of gravity as well. We'd then attach Sinking (or let's call it
  Falling?) to objects that lie one tile above any object that moved (this can
  be done in rawMove), and go from there.
   - But it's more than rawMove that needs to handle this; destroyed objects
     also need this. As well as state changes that change support (e.g., pit
     traps, ice that melts, etc.).
- Sighhh... perhaps scanning all objects with Pos is ultimately the only clean
  solution that doesn't require bits of the gravity system to be sprinkled all
  over the codebase. :-/
- OTOH, the only thing that *really* changes is the SupportsWeight component.
  We need a way to inject code such that every time SupportsWeight changes (or
  gets destroyed as part of a destroyed entity), the Pos associated with the
  entity gets appended to some list.

//

AI redesign

- Currently, we have a goal-planning system but it's too persistent.  We don't
  have a system of low-level primitives in place yet.
- Potential replacement:
   - Perhaps goals should be reevaluated per turn. At every turn the creature
     evaluates its current state, computes the score of each of its goals, and
     chooses an action based on that.
   - Changes in goals would be controlled by the relative weights surpassing
     each other.
- For some goals that require environmental scanning, should probably implement
  some sort of caching scheme.
   - Perhaps there should be a universal list of targets, kept in the World
     object, and indexed in a structure that lends itself well to proximity
     searches. Potentially use the map BSP tree for that.
      - Maybe even use a global shared goal cost cache individually summed up
        by each AI agent.
   - Keep in mind that caching is SECONDARY.  Don't get stuck thinking about
     caching until the basic system works first, *then* profile the code and
     evaluate whether caching is necessary.

//

New mapgen design:

- Stage 1:
   - Create BSP tree down to some given criteria (max depth, min size, etc.).
   - Insert back edges to make a graph.
- Stage 2:
   - Walk the graph to partition it into regions (connected subgraphs).
   - Randomly assign each region to a theme.
      * Note: this is NOT the same as assigning regions to a BSP subtree,
        because the latter produces rectangular theme regions, whereas this
        multi-stage process lets the mapgen produce non-rectangular connected
        regions.
- Stage 3:
   - Instantiate each region by substituting nodes according to the assigned
     theme.
   - Place objects, NPCs, start locations, etc..

[2021-03-08] Further refinement of new mapgen:
- Instead of using the BSP structure as the connectivity structure, what about
  we use the BSP *only* for partitioning?
- New idea:
   - Stage 1: Create a BSP tree to partition the map into rectangular blocks.
   - Stage 2: Pick n random leaf nodes and accrete neighbours *spatially*,
     i.e., not limited to BSP tree structure. As long as nodes overlap by at
     least 2 tiles, they qualify.  This partitions the rectangular blocks into
     connected regions.
      - We can optionally bias the selection of accreting neighbours by theme
        (e.g., some themes prefer a mostly-horizontal layout, some vertical,
        some don't care).
      - Theme configuration:
         - List of themes desired for generated map;
         - Each theme may be unique (assigned to exactly one region), or
           multiple (can be assigned to multiple regions).
         - Neighbour accreting function / distribution (probably best to just
           keep to vertical/horizontal bias instead of doing all 4 directions).
         - Max theme size (to handle themes used for modelling special rooms /
           group of rooms).
         - Catch-all theme for unassigned nodes (if theme constraints leave
           some areas unassigned -- or maybe we could just assign this to
           blocked nodes).
         - Placement criteria (e.g., near water line, must be at skyline,
           etc.).
   - Stage 3: Construct a *graph* of regions by spatial adjacency. Compute a
     spanning tree of regions, then insert back edges to form a connected
     subgraph. Edges only exist between blocks belonging to different regions;
     no edges are generated between blocks in a single region.
      - Note that technically, the graph produced would be a multi-graph, since
        we can have multiple edges between the same pair of regions by
        connecting different adjacent blocks that belong to each region.
      - Perhaps the most flexible approach is to leave it as an abstract graph
        of regions, and let the theme generators simply make sure to include at
        least one edge to the target region.  The returning edge from the other
        region need not coincide with this one, so one-way pit cycles can be
        possible!
      - There must be some cross-theme algorithm for deciding on exact exits,
        though. So the theme generators will need a negotiation component.
        Perhaps the easiest way is for each theme to have some sort of
        description or list of preferences for connection types, and the edge
        resolver will decide based on the two adjacent themes' preferences a
        common solution.
   - Stage 4: Instantiate themes in each region. Each theme generator will have
     freedom how to generate internal connections.


// vim:set sw=3 ts=3 et ai:
